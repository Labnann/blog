{"componentChunkName":"component---src-templates-blog-post-js","path":"/gsoc/gsoc24-interactive-mkv/","result":{"data":{"site":{"siteMetadata":{"title":"Labnan's Blog"}},"markdownRemark":{"id":"09ccb6a5-ec76-52e9-bcfa-85a9d284a7b4","excerpt":"We all know what MKV is. It's a flexible and open standard Multimedia Container Format\nthat we love and use to design audio, video, subtitle tracks in a singleâ€¦","html":"<p>We all know what MKV is. It's a flexible and open standard Multimedia Container Format\nthat we love and use to design audio, video, subtitle tracks in a single file. Making\nit perfect for storing movies and TV shows with multiple audio tracks or subtitle tracks,\nmaking it ideal for storing multiple languages.</p>\n<p>As the technology advances, so does our perception of entertainment. And there has been\na surge of interactive multimedia. Unfortunately, there is no open standards defining\na interactive multimedia should be implemented. Making it not only hard to create for\na creative author who doesn't want to bother with lots of technological difficulties,\nbut also it forces a device to depend on unnecessarily complex technologies due to the\ntechnical debt.</p>\n<p>With these in mind, my mentor Steve Lhomme, the creator of Matroska and I went on a\njourney this summer 2024 to create an open standard to support interaction over MKV\nand an MKV Player that supports this standard over our favourite VLC Media Player.</p>\n<p>The basic idea: MKV already has a way to define \"Chapters\" in a video, through the\n<a href=\"https://datatracker.ietf.org/doc/draft-ietf-cellar-chapter-codecs/\">Chapter Codec</a>.\nThese chapters are the main pillars of this creation. A chapter lets us split a video\ninto several segments. We have introduced MatroskaJS scripting for the \"entry\" and\n\"leave\" portion of these chapters. Therefore: at entry, a set of choices can be\ndisplayed to a user for the chapter's length of time, then according to the user's\nchoice selection, \"leave\" script is executed. At that point, author can decide to\ncontrol the flow of the video based on the user's choice.</p>\n<p>We explored various JavaScript Engines to implement this. The acceptance criteria was how\nsmall the binary size is, and the license must be LGPL compatible. After exploring QuickJS,\nMuJS, DuktapeJS and Hermes, we fixated on <a href=\"https://duktape.org/\">Duktape</a>. But why a  new\nscript variant when there is already exists MatroskaScript?</p>\n<p>Well, MatroskaScript defined in the current MKV specification has only\none  command GotoAndPlay, which is insufficient for interactive behavior. Moreover, the\nspecification gives a hint about the future: that it will be like ECMAScript with supports like\ncommenting. Therefore, shifting the execution engine to use a ECMAScript engine makes sense.\nHowever, an issue with ECMAScript is, the integer support; it does not hold a value properly\nand starts rounding integer numbers after 56 bit, losing backwards compatibility.</p>\n<h1>Technical details regarding the project</h1>\n<p>The project is implemented as part of the mkv module in demux, at:\n<code class=\"language-text\">vlc-src/modules/demux/mkv</code>. There was already an implementation of Chapter Codec, which\nincluded the implementation of previous GotoAndPlay command. From this we extracted\nthe \"script\" interpreter implementation, and created a MatroskaJS interpreter\nimplementation related classes. Both of them are connected via the <code class=\"language-text\">matroska segment parser</code>.\nThe segment parser binds the right interpreter based on \"ChapProcessCodecID\".</p>\n<h2>The JavaScript Frontend</h2>\n<p>Due to the nature of JavaScript Engines, we decided to create two types of functions:</p>\n<ul>\n<li>Functions named like js_execute_CommandName. These functions are pushable to the duktape api,</li>\n</ul>\n<p>and user scripts have the ability to access these functions. In these functions we handle\nthe typechecking and pass it to:</p>\n<ul>\n<li>Functions named like execute_CommandName, these are actual implementations of the Chapter Commands</li>\n</ul>\n<p>that are proposed for the new Chapter Codec implementation and can be regarded as the start of\nbackend.</p>\n<h2>Handling The Choice Display</h2>\n<p>Using VLC Subpicture API, we created buttons for each choices.</p>\n<p><img src=\"https://raw.githubusercontent.com/Labnann/blog/main/static/img/gsoc24-interactive-mkv-test.png\" alt=\"ChoiceButton\"></p>\n<p>The implementation is something like: create a button at the start\nof the chapter if the user has signalled it via the CommitChoices()</p>\n<p>command. Then, if the button states are changed, for example: if user\npressed a button, re-create parts of that button to simulate\nbutton press user experience.</p>\n<h2>Handling Input Events</h2>\n<p>We forwarded VLC's mouse event with x, y coordinates to our implementations.\nUsing this, along with the button dimension calculation from the display stage,\nwe are able to figure out where button rectangles are located.</p>\n<p>This allowed us to create \"mouse event handler\". The event handler can fire\nan event, which is connected to the vlc's original forwarded mouse event.\nWhen event handler fires the event, all subscribed \"mouse operables\" that\nare located at the correct region update their internal states. Then we\nmade the buttons we created above implement the \"mouse operable\" interface to\nconnect it all together.</p>\n<h2>Security Considerations</h2>\n<ul>\n<li>We have made sure to handle the data types that are passed into the commands</li>\n</ul>\n<p>to comply with the new MatroskaJS Specification.</p>\n<ul>\n<li>The script has 3 seconds timeout, to deal with issues like forever loop</li>\n</ul>\n<p>within the script.</p>\n<ul>\n<li>Custom error handlers are implemented based on Duktape's recommendations.</li>\n</ul>\n<h1>Related Merge Requests</h1>\n<p>These are the two merge requests containing the project:</p>\n<ol>\n<li>\n<p><a href=\"https://code.videolan.org/videolan/vlc/-/merge_requests/5925\">https://code.videolan.org/videolan/vlc/-/merge_requests/5925</a></p>\n</li>\n<li>\n<p><a href=\"https://code.videolan.org/videolan/vlc/-/merge_requests/5619\">https://code.videolan.org/videolan/vlc/-/merge_requests/5619</a></p>\n</li>\n</ol>\n<p>Here is Steve's part of the Merge Request regarding MatroskaJS:</p>\n<p><a href=\"https://github.com/ietf-wg-cellar/matroska-specification/pull/835\">https://github.com/ietf-wg-cellar/matroska-specification/pull/835</a></p>\n<p>Apart from this, various bugs in the contribs is patched to make the VLC building process\nsmoother.</p>","frontmatter":{"title":"Google Summer of Code 2024: Interactive MKV","date":"August 20, 2024","description":"Creation of the world's first Interactive MKV and Interactive MKV Player"}},"previous":{"fields":{"slug":"/gsoc/my-work-in-gsoc-at-videolan/"},"frontmatter":{"title":"Google Summer of Code - My work At VideoLAN"}},"next":null},"pageContext":{"id":"09ccb6a5-ec76-52e9-bcfa-85a9d284a7b4","previousPostId":"ac9cbd17-1fc5-5a63-b141-405ca84367e4","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}