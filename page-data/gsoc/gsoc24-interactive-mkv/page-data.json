{"componentChunkName":"component---src-templates-blog-post-js","path":"/gsoc/gsoc24-interactive-mkv/","result":{"data":{"site":{"siteMetadata":{"title":"Labnan's Blog"}},"markdownRemark":{"id":"09ccb6a5-ec76-52e9-bcfa-85a9d284a7b4","excerpt":"We all know what MKV is. It's a flexible and open standard Multimedia Container Format\nthat we love and use to design audio, video, subtitle tracks in a singleâ€¦","html":"<p>We all know what MKV is. It's a flexible and open standard Multimedia Container Format\nthat we love and use to design audio, video, subtitle tracks in a single file. Making\nit perfect for storing movies and TV shows with multiple audio tracks or subtitle tracks,\nmaking it ideal for storing multiple languages.</p>\n<p>As the technology advances, so does our perception of entertainment. And there has been\na surge of interactive multimedia. Unfortunately, there is no open standards defining\na interactive multimedia should be implemented. Making it not only hard to create for\na creative author who doesn't want to bother with lots of technological difficulties,\nbut also it forces a device to depend on unnecessarily complex technologies due to the\ntechnical debt.</p>\n<p>With these in mind, my mentor Steve L'homme, the creator of Matroska and I went on a\njourney this summer 2024 to create an open standard to support interaction over MKV and\nan MKV Player that supports this standard over our favourite VLC Media Player. I will be\ndescribing that journey in this article.</p>\n<p>The basic idea: MKV already has a way to define \"Chapters\" in a video. These chapters are\nthe main pillars of this creation. A chapter lets us split a video into several segments.\nWe have introduced MatroskaJS scripting for the \"entry\" and \"leave\" portion of these\nchapters. Therefore: at entry, a set of choices can be displayed to a user for the chapter's\nlength of time, then according to the user's choice selection, \"leave\" script is executed.\nAt that point, author can decide to control the flow of the video based on the user's choice.</p>\n<p>We explored various JavaScript Engines to implement this. The acceptance criteria was how\nsmall the binary size is. After exploring QuickJS, MuJS, DuktapeJS and Hermes, we fixated\non Duktape. But why JavaScript? Well, there was already a MatroskaScript defined in the current\nMKV specification with only one command GotoAndPlay, which is insufficient for interactive\nbehavior. However, the specification gives a hint about the future: that it will be like\nECMAScript with supports like commenting. Therefore, we came up with the version 2, the MatroskaJS\nto comply with this promise.</p>\n<p>These are the two merge requests containing the project:</p>\n<ol>\n<li>\n<p><a href=\"https://code.videolan.org/videolan/vlc/-/merge_requests/5925\">https://code.videolan.org/videolan/vlc/-/merge_requests/5925</a></p>\n</li>\n<li>\n<p><a href=\"https://code.videolan.org/videolan/vlc/-/merge_requests/5619\">https://code.videolan.org/videolan/vlc/-/merge_requests/5619</a></p>\n</li>\n</ol>\n<p>Here is Steve's part of the Merge Request regarding MatroskaJS:</p>\n<p><a href=\"https://github.com/ietf-wg-cellar/matroska-specification/pull/835\">https://github.com/ietf-wg-cellar/matroska-specification/pull/835</a></p>\n<p>Apart from this, various bugs in the contribs is patched to make the VLC building process\nsmoother.</p>","frontmatter":{"title":"Google Summer of Code 2024: Interactive MKV","date":"August 20, 2024","description":"Creation of the world's first Interactive MKV and Interactive MKV Player"}},"previous":{"fields":{"slug":"/gsoc/my-work-in-gsoc-at-videolan/"},"frontmatter":{"title":"Google Summer of Code - My work At VideoLAN"}},"next":null},"pageContext":{"id":"09ccb6a5-ec76-52e9-bcfa-85a9d284a7b4","previousPostId":"ac9cbd17-1fc5-5a63-b141-405ca84367e4","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}