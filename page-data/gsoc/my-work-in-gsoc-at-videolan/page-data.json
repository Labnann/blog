{"componentChunkName":"component---src-templates-blog-post-js","path":"/gsoc/my-work-in-gsoc-at-videolan/","result":{"data":{"site":{"siteMetadata":{"title":"Labnan's Blog"}},"markdownRemark":{"id":"e8efab9e-25aa-522b-aadb-0cda46cf09b7","excerpt":"My work at Google Summer of Code, to simply explain is: enabling dynamic\nloading for wasm32-unknown-emscripten. To understand it, we need to delve\ninto how VLCâ€¦","html":"<p>My work at Google Summer of Code, to simply explain is: enabling dynamic\nloading for wasm32-unknown-emscripten. To understand it, we need to delve\ninto how VLC's plugins are loaded.</p>\n<p>All vlc modules are declared in the source code using the series of macro\nthat starts with vlc_module_begin() and ends with vlc_module_end().</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vlc_module_begin()\n    set_shortname(N_(\"hello\"))\n    set_description(N_(\"Hello World Module\"))\n    set_capability(\"dummy\", 0)\n    set_callbacks(Open, Close)\nvlc_module_end()</code></pre></div>\n<p>In this example callbacks we define how the module is going to be initiated.\nWe give it name and capability (category) and how the module will be\nclosed.</p>\n<p>If we see the definition vlc_module_begin macro, we will find that\nit is expanded into a function named vlc_entry which takes a callback\nvlc_set and opaque as input.</p>\n<p>Now let us look into bank.c. In case of shared loading, in module_InitDynamic\nwe find that the function is loaded from a dynamic plugin file using dlopen.\nThen using dlsym, the vlc_entry function is searched and resolved.\nIn case of static module, there is a global list of static entries\nnamed vlc_static_modules.</p>\n<p>In both cases, upon finding the entry function, which we know takes a callback,\nit is passed into the vlc_plugin_describe function. From here,\nthe entry function is called with the callback vlc_plugin_desc_cb\nand opaque. Where opaque, in this context is a newly initiated\nvlc_plugin_t instance.</p>\n<p>If we look into vlc_plugin_desc_cb we can see that there is a switch\nstatement, that switches a property and based on the property it runs\nsome code.</p>\n<p>So, the entry function now has the ability to use the callback vlc_set\nto invoke vlc_plugin_desc_cb and do various things like this:</p>\n<p>vlc_set (opaque, NULL, VLC_MODULE_CREATE)</p>\n<p>To simplify this call, there are helper functions like vlc_plugin_set,\nvlc_module_set, vlc_config_set. But they all in the end invokes this.\nThis way the plugin describes itself and all its capabilities until\nit hits the vlc_module_end ie. the return statement.</p>\n<p>But where is the point that decides whether to load with dynamic module\nor shared module? To answer this we have to look into the function\nmodule_loadPlugins. This function itself is called from libvlc_new\nat some point which is exposed to the front end. During compilation\nthere is a configuration variable named HAVE_DYNAMIC_PLUGINS.</p>\n<p>My work is based on this, to get \"HAVE_DYNAMIC_PLUGINS\" enabled for\nwasm32-emscripten. Which will cause module_loadPlugins to call\nAllocateAllPlugins which recursively looking for the modules in the\ngiven path passed via environment variables or other methods from the\nfront end.</p>\n<p>Now to enable this I had to make changes into libtool to allow\nit inform it about how to \"compile\" shared modules.</p>\n<p>Also it turns out that several features of emscripten are not quite\nready yet for this purpose. For example, EM_JS is not supported\nin emscripten shared modules. EM_JS is a macro that allows one to\nexecute JavaScript inside web assembly. Also there are issues with\nlinker in emscripten linker for compiling C++ sources with shared\nmodules. Finally, emscripten's implementation of opendir only works\nwith WasmFS. WasmFS is a virtual filesystem for file operations\nprovided by emscripten. WasmFS is not linked with the server, so\nactual directory search is not conducted by opendir.</p>\n<p>To mitigate this, I added a JavaScript method that mounts the plugin\ndirectory to WasmFS. After that libvlc_new is initiated and module loading\nbegins.</p>","frontmatter":{"title":"Google Summer of Code - My work At VideoLAN","date":"August 26, 2023","description":"Google Summer of Code Work Details"}},"previous":{"fields":{"slug":"/libtool/gsoc-libtool-part1/"},"frontmatter":{"title":"Google Summer of Code Journey:  Hacking Libtool: Part 1"}},"next":null},"pageContext":{"id":"e8efab9e-25aa-522b-aadb-0cda46cf09b7","previousPostId":"721092cc-20e6-557b-8f96-991d284612b4","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}