{"componentChunkName":"component---src-templates-blog-post-js","path":"/lkmp-experience/my-experience2/","result":{"data":{"site":{"siteMetadata":{"title":"Labnan's Blog"}},"markdownRemark":{"id":"b44dadc9-46be-5ca4-9493-80b58fc28d54","excerpt":"For the past one year, I knew about Linux Kernel Mentorship Program\nwhich I had been wishing to join. And this summer as my university\nasks me for gainingâ€¦","html":"<p>For the past one year, I knew about Linux Kernel Mentorship Program\nwhich I had been wishing to join. And this summer as my university\nasks me for gaining industry level knowledge, I decided why not now?</p>\n<p>On 8th May, I applied for the Mentorship program. \"Will they take\nme?\" I wondered. Next two days I did not notice anything to happen.\nOn May 10, I went to read the emails and there I realized I have\ntasks assigned to me with the deadline being on May 18. Most of the task\ndescription scared me and I was like, I have to do these in one week?!\nIf you have tough looking enemy in video games at very first mission,\nyou are like \"Relax! It is the first mission, it must be easy.\" I jumped\nwith this similar motivation.</p>\n<p>As you have guessed, these tasks aren't just any other screening tasks,\nthey are a great learning opportunity which teaching me to boot, build,\nbreak, test, patch the kernel as well as learning to get familiar with\nthe release cycle and communications. I worked a lot because to reach\nmy target of getting the screening tasks done properly, I had a lot to\nlearn in just one week.</p>\n<p>On May 27, I got the email.\n\"Congratulations! We are pleased to let you know that you have been\naccepted as a mentee to the Linux kernel Bug Fixing Summer 2022 mentorship.\nThe program administrator will contact you with the next steps.\"</p>\n<p>And my journey as a Linux Kernel Mentee started.</p>\n<p>Linux Kernel Bug Fixing is a Linux Kernel Mentorship Program designed\nfor newcomers in the open source community. I have learned so many\naspects about computer science, lower level programming, open source\ndevelopment, working with community, software engineering, software\nproject management, importance of defining and maintaining core\nprinciples in a project in the past three months.</p>\n<p>One of the most important things I learned is using the docs and codebase\nitself to learn to work. My mentors always encouraged the documentations\nand the source code that gives relevant information.</p>\n<p>Some of the parts of the codebase is so\nsimple and fascinating. Some codes have some really funny comments.\nIt is really satisfying, to see the code building up from top to down\nat the core level of hardware, which we normally do not see in other\nsoftware projects.</p>\n<p>To try and understand this bug I used this tool named ftrace. I was\nfascinated by the result seeing the internals of how so many functions\ngetting executed one after another just to run a simple reproducer. If\nyou are interested about ftrace you can learn about it here:\n<a href=\"https://www.kernel.org/doc/Documentation/trace/ftrace.txt\">https://www.kernel.org/doc/Documentation/trace/ftrace.txt</a></p>\n<p>However my tool of choice was GDB and Qemu. Qemu is an emulator where\nI run the kernel image and using Qemu's debugger I connect gdb to it\nand start debugging. If the error path is too mysterious for me in that\nI use ftrace.</p>\n<p>I learned, even if C is not an Object Oriented Language, it is possible\nto write clean codes with it. It does not have Class, but it does\nhave structs. The higher level modules define and provide structs\nthat have void function pointers. The lower level modules implement\nthe functions and inject the pointers into the structs. This way the\nDependency Injection Principle is kept intact. The lower level module\nitself defines how it needs to be initiated, used, freed and higher\nlevel module just calls them.</p>\n<p>Another interesting thing here to take from this project is error\nhandling. If an error occurs, a negative error code is propagated\nfrom deep within the low level to the higher level. Here is an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">struct dev* dev_create(params) \n{\n struct *dev = kmalloc(sizeof(struct dev), params.flag)\n if (!dev)\n    return ERR_PTR(-ENOMEM);\n// initiate things\n ...\n}\n\n\nint dev_create_user ()\n{\n ...\n struct dev = dev_create(params);\n if (IS_ERR(dev))\n    return (PTR_ERR(dev));\n ...\n //do other things.\n\n}</code></pre></div>\n<p>This way error gets propagated to the surface until it is handled.\nIn many cases goto is used for handling errors if it is a bit complex.\nYes, if used correctly, goto is great for clean coding error handlers\nand not evil.</p>\n<p>Programmers often insert <code class=\"language-text\">BUG_ON</code>, <code class=\"language-text\">WARN_ON</code>, <code class=\"language-text\">ERROR_ON</code>, <code class=\"language-text\">pr_debug</code>\netc which only logs when Kernel is compiled with config like Dynamic\nDebug is turned on. These not only increases readability of the code,\nthey help fuzzers to try and trigger unintended program paths to find\nout bugs automatically. The kernel has some other dynamic debugging\ntools within it too, like KASAN which is used to detect out of bounds\naccess and use after free, KCSAN for finding data races. Also KMSAN\nwhich is not in the upstream yet, for finding uninit variables.</p>\n<p>The bugs I tried to solve are triggered by syzkaller dynamically or\nstatic analysis tools like coverity uncovered some potential bugs.\nSo my task description was easy, try to fix the bugs and let the\nmentors know if any difficulties are faced. Everyday I went to Syzbot,\nlook through the issues that are probably valid and choose one or two\nbugs that has reproducer and try to find out what causes the problem\nand what could be the solution to the problem.</p>\n<p>Here is the link to Syzbot, if you are interested:\n<a href=\"https://syzkaller.appspot.com/upstream\">https://syzkaller.appspot.com/upstream</a></p>\n<p>And here is the Coverity link for Linux Bugs:\n<a href=\"https://scan.coverity.com/projects/linux\">https://scan.coverity.com/projects/linux</a></p>\n<p>Linux Kernel is a complicated project. Often It was hard to come up with\nthe right question to ask the mentors. So I had to self study, buy one\nor two books just to learn what could be the right term to use. But\nthat is not all. The thing about open source is, it is not just the\ndesignated mentors that help, rather everyone helps. I send a patch\nthat might be solution and people working from that area comments on\nmy patches. I get to ask questions about why they think so and they\nare really helpful and considering enough to answer these questions. This\nis one of the most wonderful experiences to me. They do not care about\nage, race, gender, ethnicity, color or religion. The open source culture\nis truly awesome.</p>\n<p>Often my fellow mentees did some very cool discussions. Those were\nvery informative and fun. It was a great experience to meet, learn\nand work with people from different parts of the world. Every day I\nis something new to learn.</p>\n<p>And before I could understand it, the ending of this amazing adventure\narrived. But as our mentor said, the purpose was to get us started,\nwith Kernel Development and we can always keep contributing to this\nwonderful project. So, this is not the ending, rather the beginning.</p>\n<p>By now I have three patches accepted in Linux and few rejected as well.\nWith all of them being very informative. And the big news is Linux 6.0\nis going to be released soon, with my code running in it too.</p>","frontmatter":{"title":"Linux Kernel Bug Fixing - My Experience","date":"August 27, 2022","description":"LKMP Experience"}},"previous":{"fields":{"slug":"/lkmp/how-lkmp-prepares-candidates/"},"frontmatter":{"title":"Linux Kernel Mentorship Program: How They Prepared Me For Kernel Development Before I Even Got Accepted"}},"next":{"fields":{"slug":"/libtool/gsoc-libtool-part1/"},"frontmatter":{"title":"Google Summer of Code Journey:  Hacking Libtool: Part 1"}}},"pageContext":{"id":"b44dadc9-46be-5ca4-9493-80b58fc28d54","previousPostId":"ac174ed3-9328-5e78-9e86-f17f6f385626","nextPostId":"b2b1004a-d7f2-5954-9f2a-06889dd84185"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}